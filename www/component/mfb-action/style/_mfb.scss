/**
 * CONTENTS
 *
 * #Introduction........Naming conventions used throughout the code.
 *
 * #SETTINGS
 * Variables............Globally-available variables and config.
 *
 * #TOOLS
 * Mixins...............Useful mixins.
 *
 * #GENERIC
 * Demo styles..........Styles for demo only (consider removing these).
 *
 * #BASE
 * Raw styles.............the very basic component wrapper.
 * Modifiers..............the basic styles dependant on component placement.
 * Debuggers..............the basic styles dependant on component placement.
 *
 * #BUTTONS
 * Base..................Wrapping and constraining every button.
 * Modifiers.............Styles that depends on state and settings.
 * Animations............Main animations of the component.
 * Debuggers.............Styles for development.
 *
 * #LABELS
 * Base..................Wrapping and constraining every label.
 * Modifiers.............styles that depends on state and settings.
 * Debuggers.............Styles for development.
 *
 * #DEVELOPMENT
 * In development........These styles are in development and not yet finalised
 * Debuggers..........helper styles and flags for development.
 */

/*------------------------------------*\
    #Introduction
\*------------------------------------*/
/**
 * The code AND the comments use naming conventions to refer to each part of
 * the UI put in place by this component. If you see that somewhere they are
 * not followed please consider a Pull Request. The naming conventions are:
 *
 * "Component" : the widget itself as a whole. This is the last time it will be
 *               called anything different than "component". So, stay away from
 *               "widget", "button" or anything else when referring to the
 *               Component in general.
 *
 * "Main Button" : the button that is always in view. Hovering or clicking on it
 *                 will reveal the child buttons.
 *
 * "Child buttons" : if you've read the previous point you know what they are.
 *                   Did you read the previous point? :)
 *
 * "Label(s)" : the tooltip that fades in when hovering over a button.

/*------------------------------------*\
    #SETTINGS | Variables
\*------------------------------------*/

/* COLORS ----------------------------*/

// the main/primary color
$main-color : $primaryColor;
// aka the white text
$bright-text : rgba(255, 255, 255, 0.8);

/* EFFECTS ---------------------------*/

// which effects must be made available in the css
$effects-zoomin : true;
$effects-slidein : true;
$effects-fountain : true;

/* SPEEDS ----------------------------*/

// the speed of the inflation of each button after hovering on the main button
$delay-staggering-inflate : 0.1s;
// when hovering on the main button the child buttons slide into view
$slide-speed : .5s;
// the labels disappear at this speed on mouse out
$label-hover-off : .5s;
// the labels appear at this speed on mouse over
$label-hover-on : .3s;

/* SIZES -----------------------------*/

// main button diameter
$main_button_size : 56px;
// main button diameter
$child_button_size : 56px;
// the distance of the main button from the closest corners of the screen
$border-distance : 25px;
// font-size for labels
$labels-font-size : 13px;
// top & bottom padding for the labels
$labels-padding-vertical : 4px;
// left & right padding for the labels
$labels-padding-horizontal : 10px;

/* OTHER VARIABLES -------------------*/

// how many child buttons does the component have
$number-of-child-buttons : 4;

/* IMPORT USER-DEFINED OVERRIDES -----*/

/*------------------------------------*\
    #BASE | Raw styles
\*------------------------------------*/

/**
 * The very core styling of the button.
 * These styles are shared by every instance of the button.
 * Styles placed here should NOT care about placement in the screen,
 * options chosen by the user or state of the button.
 */

.mfb-component {
  box-sizing   : border-box; // A better box-sizing
  list-style   : none;
  margin       : $border-distance;
  padding-left : 0;
  position     : fixed;
  // this padding is needed really only if the element is an <ul>
  // otherwise it can probably be ditched.
  white-space  : nowrap;
  z-index      : 30;
}

// make sure that everything inside this component
// inherits the same box-sizing
.mfb-component {
  *, *:before, *:after {
    box-sizing : inherit;
  }
}

/*------------------------------------*\
    #BASE | Modifiers
\*------------------------------------*/
/**
 * These styles depends on the placement of the button.
 * Styles can be:
 * 1. Top-left:  modified by the " --tl " suffix.
 * 2. Top-right: modified by the " --tr " suffix.
 * 3. Bottom-left:  modified by the " --bl " suffix.
 * 4. Bottom-right: modified by the " --br " suffix.
 */

.mfb-component--tl {
  @extend .mfb-component;
  left : 0;
  top  : 0;
}

.mfb-component--tr {
  @extend .mfb-component;
  right : 0;
  top   : 0;
}

.mfb-component--bl {
  @extend .mfb-component;
  bottom : 0;
  left   : 0;
}

.mfb-component--br {
  @extend .mfb-component;
  bottom : 0;
  right  : 0;
}

/*------------------------------------*\
    #BUTTONS | Base
\*------------------------------------*/

.mfb-component__button {
  background-color  : $main-color;
  border            : none;
  border-radius     : 50%;
  box-shadow        : 0 0 4px rgba(0, 0, 0, .14), 0 4px 8px rgba(0, 0, 0, .28);
  color             : #f1f1f1;
  cursor            : pointer;
  display           : inline-block;
  font-weight       : bold;
  outline           : none;
  padding           : 0;
  position          : relative;
  position          : relative;
  -webkit-user-drag : none;

  &.button-light {
    @include button-style($button-light-bg, $button-light-border, $button-light-active-bg, $button-light-active-border, $button-light-text);
    @include button-clear($button-light-border);
    @include button-outline($button-light-border);
  }

  &.button-stable {
    @include button-style($button-stable-bg, $button-stable-border, $button-stable-active-bg, $button-stable-active-border, $button-stable-text);
    @include button-clear($button-stable-border);
    @include button-outline($button-stable-border);
  }

  &.button-positive {
    @include button-style($button-positive-bg, $button-positive-border, $button-positive-active-bg, $button-positive-active-border, $button-positive-text);
    @include button-clear($button-positive-bg);
    @include button-outline($button-positive-bg);
  }

  &.button-calm {
    @include button-style($button-calm-bg, $button-calm-border, $button-calm-active-bg, $button-calm-active-border, $button-calm-text);
    @include button-clear($button-calm-bg);
    @include button-outline($button-calm-bg);
  }

  &.button-assertive {
    @include button-style($button-assertive-bg, $button-assertive-border, $button-assertive-active-bg, $button-assertive-active-border, $button-assertive-text);
    @include button-clear($button-assertive-bg);
    @include button-outline($button-assertive-bg);
  }

  &.button-balanced {
    @include button-style($button-balanced-bg, $button-balanced-border, $button-balanced-active-bg, $button-balanced-active-border, $button-balanced-text);
    @include button-clear($button-balanced-bg);
    @include button-outline($button-balanced-bg);
  }

  &.button-energized {
    @include button-style($button-energized-bg, $button-energized-border, $button-energized-active-bg, $button-energized-active-border, $button-energized-text);
    @include button-clear($button-energized-bg);
    @include button-outline($button-energized-bg);
  }

  &.button-royal {
    @include button-style($button-royal-bg, $button-royal-border, $button-royal-active-bg, $button-royal-active-border, $button-royal-text);
    @include button-clear($button-royal-bg);
    @include button-outline($button-royal-bg);
  }

  &.button-dark {
    @include button-style($button-dark-bg, $button-dark-border, $button-dark-active-bg, $button-dark-active-border, $button-dark-text);
    @include button-clear($button-dark-bg);
    @include button-outline($button-dark-bg);
  }
}

/**
 * This is the unordered list for the list items that contain
 * the child buttons.
 *
 */
.mfb-component__list {
  list-style : none;
  margin     : 0;
  padding    : 0;
  & > li {
    display  : block;
    margin   : -10px 0;
    padding  : 10px 0;

    position : absolute;
    top      : 0;
  }
}

/**
 * This is the basic styles for all the icons inside the main button
 */
.mfb-component__icon {
  font-size   : 18px;
  line-height : 56px;
  position    : absolute;
  text-align  : center;
  width       : 100%;
}

.mfb-component__wrap {
  // this double declaration adds some padding to the main button
  // to expand the area that triggers the hover state. The equal, negative
  // margin evens out the distance form the borders so that the button
  // does not shift out of position.
  margin  : -$border-distance;
  padding : $border-distance;
}

[data-mfb-toggle="hover"]:hover,
[data-mfb-state="open"] {
  .mfb-component__icon {
    transform         : scale(1) rotate(0deg);
    -webkit-transform : scale(1) rotate(0deg);
  }
}

/*------------------------------------*\
    #BUTTONS | Modifiers
\*------------------------------------*/

.mfb-component__button--main {
  @extend .mfb-component__button;
  height  : $main_button_size;
  width   : $main_button_size;
  z-index : 20;
}

.mfb-component__button--child {
  @extend .mfb-component__button;
  height : $child_button_size;
  width  : $child_button_size;
}

// the icons for the main button
.mfb-component__main-icon--active,
.mfb-component__main-icon--resting {
  @extend .mfb-component__icon;
  transform          : scale(1) rotate(360deg);
  -webkit-transform  : scale(1) rotate(360deg);
  transition         : transform 150ms cubic-bezier(.4, 0, 1, 1);
  -webkit-transition : -webkit-transform 150ms cubic-bezier(.4, 0, 1, 1);
}

// the icons for the main button
.mfb-component__child-icon,
.mfb-component__child-icon {
  @extend .mfb-component__icon;
}

.mfb-component__main-icon--active {
  opacity : 0;
}

[data-mfb-toggle="hover"]:hover,
[data-mfb-state="open"] {
  .mfb-component__main-icon {
    transform         : scale(1) rotate(0deg);
    -webkit-transform : scale(1) rotate(0deg);
  }
  .mfb-component__main-icon--resting {
    opacity : 0;
  }
  .mfb-component__main-icon--active {
    opacity : 1;
  }
}

/*------------------------------------*\
    #BUTTONS | Animations
\*------------------------------------*/

@import "_/_slidein";
@import "_/_zoomin";
@import "_/_fountain";

// Ugly work-around for this https://github.com/sass/sass/issues/451
@if $effects-slidein == true {
  @include effects-slidein;
}

@if $effects-zoomin == true {
  @include effects-zoomin;
}

@if $effects-fountain == true {
  @include effects-fountain;
}

/*------------------------------------*\
    #LABELS | base
\*------------------------------------*/

/**
 * These are the labels associated to each button,
 * exposed only when hovering the related button.
 * They are called labels but are in fact data-attributes of
 * each button (an anchor tag).
 */

[data-mfb-label]:after {
  background     : rgba(0, 0, 0, .4);
  border-radius  : 3px;
  color          : $bright-text;
  content        : attr(data-mfb-label);
  font-size      : $labels-font-size;
  margin-top     : - ($labels-padding-vertical + $labels-font-size / 2);
  opacity        : 0;
  padding        : $labels-padding-vertical $labels-padding-horizontal;
  pointer-events : none;
  position       : absolute;
  top            : 50%;
  transition     : all $label-hover-off;
  transition     : all $label-hover-off; // the label disappears at this speed
}

[data-mfb-toggle="hover"] [data-mfb-label]:hover:after,
[data-mfb-state="open"] [data-mfb-label]:after {
  content    : attr(data-mfb-label);
  opacity    : 1;
  transition : all $label-hover-on; // the label appears at this speed
}

/*------------------------------------*\
    #LABELS | Modifiers
\*------------------------------------*/
.mfb-component--br, .mfb-component--tr {
  [data-mfb-label]:after {
    content : attr(data-mfb-label);
    right   : 70px;
  }
}

.mfb-component--tl, .mfb-component--bl {
  [data-mfb-label]:after {
    content : attr(data-mfb-label);
    left    : 70px;
  }
}

/*------------------------------------*\
    #DEVELOPMENT | In development
\*------------------------------------*/
/**
 * This part is where unfinished code should stay.
 * When a feature is ready(sh) move these styles to their proper place.
 */

/*------------------------------------*\
    #DEVELOPMENT | Debuggers
\*------------------------------------*/

/**
 * These are mainly helpers for development. They do not have to end up
 * in production but it's handy to keep them when developing.
 */

/**
 * Apply this class to the html tag when developing the slide-in button
 */
html.mfb-slide-in {
  border-top : 5px solid teal;
}

html.mfb-debug * {
  border : 1px solid $energized;
}


